rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth.uid != null;
    }

    function isUserAuthenticated(userId) {
      return isAnyAuthenticated() && userId == request.auth.uid;
    }

    match /users/{userId} {
      allow create: if isUserAuthenticated(userId)
        && (!('name' in request.resource.data) || (request.resource.data.name is string && request.resource.data.name.size() <= 30)
        && request.resource.data.createdAt == request.time;
      allow update: if isUserAuthenticated(userId)
        && (!('name' in request.resource.data) || (request.resource.data.name is string && request.resource.data.name.size() <= 30)
        && request.resource.data.createdAt == request.time;
      allow get: if isUserAuthenticated(userId);
    }

    match /users/{userId}/logs {
      allow list: if isUserAuthenticated(userId);
    }

    match /users/{userId}/logs/{logId} {
      allow create: if isUserAuthenticated(userId)
        && (!('name' in request.resource.data) || (request.resource.data.name is string && request.resource.data.name.size() <= 300))
        && (!('startDate' in request.resource.data) || request.resource.data.startDate is timestamp)
        && (!('endDate' in request.resource.data) || request.resource.data.endDate is timestamp);

      allow update: if isUserAuthenticated(userId)
        && (request.resource.data.name is string && request.resource.data.name.size() <= 300)
        && (request.resource.data.startDate is timestamp)
        && (request.resource.data.endDate is timestamp);

      allow get: if isUserAuthenticated(userId);
    }
  }
}
